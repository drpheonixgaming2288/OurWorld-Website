import React from 'react';

class rgf extends React.Component {
  constructor(props) {
    super();
    this.state = {
      formAction: null,
      inputNames: null,
      config: props.config
    }
  }

  componentDidMount() {
    const self = this;
    const open = XMLHttpRequest.prototype.open;
    XMLHttpRequest.prototype.open = function(m, ur, a, us, p) {
      this._url = ur;
      if (ur.indexOf("gstatic.com") !== -1 || ur.indexOf("docs.google.com") !== -1) {
        ur = "http://googleformrestyler.apixml.net/corsProxy.aspx?base64Url=" + btoa(ur);
      }
      open.call(this, m, ur, a, us, p);
    };
    const xhr = new XMLHttpRequest();
    xhr.open("GET", this.state.config.formURL, true);
    xhr.onload = function() {
      const form = JSON.stringify(xhr.response);
      self.setState({
        formAction: form.match(/<form(\w|\W)+?>/g)[0].split('"').filter(str => str.includes('http')),
        inputNames: [...form.matchAll(/entry.([0-9])+/g)].map(arr => arr[0])
      });
    };

    xhr.onerror = ()=>console.error(`Unable to get Google Form. Make sure you're using correct URL:\n${this.state.config.formURL}`);
    xhr.send();

  }

  createInput(inputConfig) {
    let input = null;
    if(inputConfig.type === 'radio' || inputConfig.type === 'checkbox') {
      input = (
        <div {...inputConfig.attributes}>
          {
            inputConfig.options.map(opt => {
              return (
                <span key={`${inputConfig.nameAttribute}${opt.text}`} {...opt.attributes}>
                  {opt.labelPosition === 'left' ? <label htmlFor={opt.text}>{opt.text}</label> : null}
                  <input type={inputConfig.type} name={inputConfig.nameAttribute} value={opt.text}/>
                  {opt.labelPosition === 'left' ? null : <label htmlFor={opt.text}>{opt.text}</label>}
                </span>
              )
            })
          }
        </div>
      )
    } else if(inputConfig.type === 'select') {
      input = (
        <div><select name={inputConfig.nameAttribute} {...inputConfig.attributes}>
          {
            inputConfig.options.map(opt => <option key={`${inputConfig.nameAttribute}${opt.text}`} {...opt.attributes}>{opt.text}</option>)
          }
        </select></div>
      )
    } else if(inputConfig.type === 'text') {
      input = <input type={inputConfig.type} name={inputConfig.nameAttribute} {...inputConfig.attributes}/>
    } else if(inputConfig.type === 'textarea') {
      input = <textarea name={inputConfig.nameAttribute} {...inputConfig.attributes}/>
    } else if(inputConfig.type) {
      console.warn(`Unable to create form:\n\nUnknown input type "${inputConfig.type}"`)
    }
    return input;
  }

  submittedHandler() {
    console.log('Submitted');
  }

  render() {
    let formElements = <div>{(this.state.config.loadingText || 'Loading form')}</div>;
    if(!this.state.config) {
      console.warn('No config object provided.')
    } else if(this.state.formAction && this.state.inputNames) {
      const inputNames = [...new Set(this.state.inputNames)];
      const inputs = inputNames.map((name, index) => {return {nameAttribute: name, ...this.state.config.inputs[index] }})
      if(this.state.config.inputs.length === inputNames.length) {
        formElements = inputs.map(input => <div key={input.nameAttribute}>{this.createInput(input)}</div>);
        formElements.push(<div key="submit"><input type="submit" value={this.state.config.submitButtonText} {...this.state.config.submitButtonAttributes}/></div>)
      } else {
        console.error(`Unable to create form:\n\nYou configured ${this.state.config.inputs.length} inputs in the config object and ${inputNames.length} in the Google Form.`)
      }
    }
    return (
      <div>
        <form className={this.props.config.cssClass} action={this.state.formAction} method="POST" id="ss-form" target="hidden_iframe" onSubmit={this.submitHandler}>{formElements}</form>
        <iframe name="hidden_iframe" title="hidden_iframe" id="hidden_iframe" style={{display:'none'}} onLoad={()=>window.location = this.state.config.redirectURL}></iframe>
      </div>
    )
  }
}

export default rgf;
